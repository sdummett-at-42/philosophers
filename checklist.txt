# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    checklist.txt                                      :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: sdummett <sdummett@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2021/12/05 21:05:17 by sdummett          #+#    #+#              #
#    Updated: 2021/12/05 21:14:10 by sdummett         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

## Philo code 
- Check the code of Philo for the following things and ask for an explanation.  
- Check if there is one thread per philosopher.  
- Check there's only one fork per philosopher.  
- Check if there is a mutex per fork and that it's used to check the fork value and/or change it.  
- Check the output should never produce a scrambled view.  
- Check how the death of a philosopher is checked and if there is a mutex to protect that a philosopher dies and 
starteating at the same time.  

## Philo test 
- Do not test with more than 200 philosophers  
- Do not test with time_to_die or time_to_eat or time_to_sleep under 60 ms - Test with 1 800 200 200, the 
philosopher should not eat and should die!  
- Test with 5 800 200 200, no one should die!  
- Test with 5 800 200 200 7, no one should die and the simulation should stop when all the philosopher has eaten 
atleast 7 times each.  
- Test with 4 410 200 200, no one should die!  
- Test with 4 310 200 100, a philosopher should die!  
- Test with 2 philosophers and check the different times (a death delayed by more than 10 ms is unacceptable).  
- Test with your values to check all the rules. Check if a philosopher dies at the right time if they don't steal forks, 
etc. 

## Philo_bonus code 
- Check the code of philo_bonus for the following things and ask for an explanation.  
- Check if there will be one process per philosopher and that the first process waits for all of them.  
- Check if there is a single semaphore that represents the number of forks.  
- Check if the output is protected against multiple access. To avoid a scrambled view.  
- Check how the death of a philosopher is checked and if there is a semaphore to protect that a philosopher dies 
andstarts eating at the same time.  

## Philo_bonus test

- Do not test with more than 200 philosophers
- Do not test with time_to_die or time_to_eat or time_to_sleep under 60 ms
- Test with 5 800 200 200, no one should die!
- Test with 5 800 200 200 7, no one should die and the simulation should stop
	when all the philosopher has eaten at leat 7 times each.
- Test with 4 410 200 200, no one should die!
- Test with 4 310 200 100, a philosopher should die!
- Test with 2 philosophers and check the different times (a death delayed by more than ms is unacceptable).
- Test with your values to check all the rules. Check if a philosopher dies at the right time if they don't steal forks, etc.
